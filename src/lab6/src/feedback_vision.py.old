#!/usr/bin/env python

import rospy
from nav_msgs.msg import Odometry
from geometry_msgs.msg import Twist, Quaternion
from ar_pose.msg import ARMarker, ARMarkers
import tf
import numpy as np
import sys
import math
from average import Avg_xyz, Avg_rpy # calibration msg


###############################################################################

rHg = np.identity(4) # error
iHr = np.identity(4)
iHg = np.identity(4)
cHr = np.identity(4)
cHm = np.identity(4)
mHg = np.identity(4)

K_alpha = 1.5
K_rho   = 0.7
K_beta  = -0.5
gain = [K_rho, K_alpha, K_beta]

rho = 0
alpha = 0
beta = 0
v = 0
w = 0

first_ar = False
first_ar = True
ar_bias = 0
first_odom = True
first_imu = False
first_imu = True
imu_bias = 0

marker_in_view = True

threshold_linear = 0.05
threshold_angular = 0.1 

xyz = [0, 0, 0]
rpy = [0, 0, 0]
error = [0, 0, 0]

pub = None

###############################################################################

def get_wHm(marker_id):
    if marker_id == 1:
        wHm1 = np.array([
            [0,-1, 0, 0.485],
            [1, 0, 0, 2.815],
            [0, 0, 1,     0]
            [0, 0, 0,     1]
        ])
    elif marker_id == 2:
        wHm2 = np.array([
            [ 0, 1, 0, 0.485],
            [-1, 0, 0,-0.255],
            [ 0, 0, 1,     0]
            [ 0, 0, 0,     1]
        ])
    elif marker_id == 3:
        wHm3 = np.array([
            [1, 0, 0, 2.39],
            [0, 1, 0,    0],
            [0, 0, 1,    0]
            [0, 0, 0,    1]
        ])
    elif marker_id == 4:
        wHm4 = np.array([
            [-1, 0, 0,-0.33],
            [ 0,-1, 0,    0],
            [ 0, 0, 1,    0]
            [ 0, 0, 0,    1]
        ])

###############################################################################

def set_mHg(x, y, theta):
    global mHg
    mHg = np.array([
        [np.cos(theta),-np.sin(theta), 0, x],
        [np.sin(theta), np.cos(theta), 0, y],
        [0,             0,             1, 0],
        [0,             0,             0, 1]
    ])


def set_cHr(x, y, z, roll, pitch, yaw):
    global cHr

    Rx = np.array([
        [1, 0,            0],
        [0, np.cos(roll),-np.sin(roll)],
        [0, np.sin(roll), np.cos(roll)]
    ])

    Ry = np.array([
        [np.cos(yaw), 0,-np.sin(yaw)],
        [0,           1, 0],
        [np.sin(yaw), 0, np.cos(yaw)]
    ])

    Rz = np.array([
        [np.cos(roll),-np.sin(roll), 0],
        [np.sin(roll), np.cos(roll), 0],
        [0,            0,            1]
    ])

    cHr[:3,:3] = np.matmul(np.matmul(Rz, Ry), Rx)
    cHr[:3, 3] = [x, y, z]


###############################################################################

def ar_callback(msg):
    global xyz, rpy, first_ar, ar_bias, first_ar, marker_in_view

    if len(msg.markers) > 0:
        msg.markers.sort(key=lambda x: x.confidence, reverse=True)

        if msg.markers[0].confidence < 20:
            marker_in_view = False
            return

        marker_in_view = True

        p = msg.markers[0].pose.pose.position
        o = msg.markers[0].pose.pose.orientation

        rpy = list(tf.transformations.euler_from_quaternion([o.x, o.y, o.z, o.w]))
        xyz = [p.x, p.y, p.z]

        if first_ar == True:
            first_ar = False
            ar_bias = rpy[2]

        rpy[2] -= ar_bias

        cHm = np.array([
            [np.cos(rpy[2]),-np.sin(rpy[2]), 0, xyz[0]],
            [np.sin(rpy[2]), np.cos(rpy[2]), 0, xyz[1]],
            [0,              0,              1, xyz[2]],
            [0,              0,              0, 1]
        ])

    else:
        marker_in_view = False


def odom_callback(msg):
    global xyz, first_odom

    if marker_in_view:
        return

    if first_odom:
        first_odom = False

    p = msg.pose.pose.position
    xyz = [p.x, p.y, p.z]


def imu_callback(msg):
    global rpy, first_imu, first_imu, imu_bias

    if marker_in_view:
        return

    rpy = list(tf.transformations.euler_from_quaternion([msg.x, msg.y, msg.z, msg.w]))

    if first_imu == True:
        first_imu = False
        imu_bias = rpy[2]

    rpy[2] -= imu_bias


###############################################################################

def update_rab():
    global rHg, rho, alpha, beta

    x = rHg[0, 3]
    y = rHg[1, 3]
    theta = tf.transformations.euler_from_matrix(rHg[:3,:3], 'rxyz')[2]

    rho = np.sqrt(x**2 + y**2)
    alpha = math.atan2(-y, -x) - theta
    alpha = alpha % (2 * math.pi)

    if (alpha > math.pi):
        alpha -= 2*math.pi

    beta = -alpha - theta


def update_vw():
    global v, w, rho, alpha, beta, gain
    v = gain[0] * rho
    w = (gain[1] * alpha) + (gain[2] * beta)


def update_rHg():
    global iHr, rHg, first_ar, first_odom, first_imu, marker_in_view

    if marker_in_view:
        rHg = np.matmul(np.matmul(np.linalg.inv(cHr), cHm), mHg)
    else:
        iHr = np.array([
            [np.cos(rpy[2]), -np.sin(rpy[2]), 0, xyz[0]],
            [np.sin(rpy[2]),  np.cos(rpy[2]), 0, xyz[1]],
            [0,               0,              1, xyz[2]],
            [0,               0,              0, 1]
        ])
        rHg = np.matmul(np.linalg.inv(iHr), iHg)

    print(rHg)

    first_ar = False
    first_odom = False
    first_imu = False


###############################################################################

def move(x_G, y_G, theta_G):
    global v, w, first_ar, xyz, rpy, threshold_linear, threshold_angular, pub, marker_in_view

    rate = rospy.Rate(10)

    theta_G = math.radians(theta_G)
    set_cHr(Avg_xyz[0], Avg_xyz[1], Avg_xyz[2], Avg_rpy[0], Avg_rpy[1], Avg_rpy[2])
    set_iHg(x_G, y_G, theta_G)

    move = Twist()

    while not rospy.is_shutdown():
        if not first_ar or not (first_imu and first_odom):
            update_rHg()
            update_rab()
            update_vw()

            move.linear.x = v
            move.angular.z = w
            pub.publish(move)

            compared_angle = theta_G - rpy[2]
            compared_angle = (compared_angle + np.pi) % (2 * np.pi) - np.pi

            if abs(x_G - xyz[0]) <= threshold_linear and abs(y_G - xyz[1]) <= threshold_linear and abs(compared_angle) <= threshold_angular:
                error = [abs(x_G - xyz[0]), abs(y_G - xyz[1]), abs(compared_angle)]

                stop = Twist()
                stop.linear.x = 0
                stop.angular.z = 0

                pub.publish(stop)
                break


###############################################################################

if __name__ == '__main__':
    args = rospy.myargv(argv=sys.argv)

    if len(args) != 4:
        print('Usage: {} <x> <y> <theta>'.format(args[0]))
        sys.exit(1)

    rospy.init_node('feedback_vision', anonymous=True)
    rospy.Subscriber('/ar_pose_marker', ARMarkers, ar_callback)
    rospy.Subscriber('/odom', Odometry, odom_callback)
    rospy.Subscriber('/imu', Quaternion, imu_callback)
    pub = rospy.Publisher('/cmd_vel', Twist, queue_size=1)

    move(float(args[1]), float(args[2]), math.radians(float(args[3])))

